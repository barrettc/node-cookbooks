{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Launches OpsWorks stack, layer, instances and associated resources to run the application.",
  "Parameters": {
    "DefaultOs" : {
      "Description" : "The os for the app",
      "Type" : "String",
      "Default" : "Amazon Linux"
    },
    "StorageSize" : {
      "Description" : "How big the secondary storage",
      "Type" : "Number",
      "Default": "20"
    },
    "InstanceType" : {
      "Description" : "C2 instance type",
      "Type" : "String",
      "Default" : "t2.medium",
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "CassandraInstanceType" : {
      "Description" : "Cassandra's EC2 instance type",
      "Type" : "String",
      "Default" : "t2.small",
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "GitCookbookRepo": {
      "Default" : "https://github.com/barrettc/node-cookbooks.git",
      "Type" : "String",
      "Description": "Where the cookbooks are stored"
    },
    "AppRepo": {
      "Default" : "https://s3.amazonaws.com/groovice/mvp-0.0.1.tgz",
      "Type" : "String",
      "Description": "Where the npm application code is stored"
    },
    "DefaultKeyPair" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },
    "VPC" : {
      "Default":"vpc-e2ebfc87",
      "Description" : "Id of the VPC to Launch into",
      "Type" : "String"
    },
    "PrivateSubnets" : {
      "Default":"subnet-caff9ce1,subnet-424a6d35,subnet-3c205965",
      "Description" : "for ppm one of: subnet-cc23ade7,subnet-53642724",
      "Type" : "CommaDelimitedList"
    },
    "PublicSubnets" : {
      "Default":"subnet-c3ff9ce8,subnet-364a6d41,subnet-3b205962",
      "Description" : "for ppm one of: subnet-cc23ade7,subnet-53642724",
      "Type" : "CommaDelimitedList"
    },
    "MongoPath" : {
      "Default":"/data",
      "Description" : "where the mongo stuff goes ",
      "Type" : "String"
    },
    "CassandraPath" : {
      "Default":"/data",
      "Description" : "where the cassandra stuff goes ",
      "Type" : "String"
    }
  },
  "Conditions":{
    "UseCassandraVolume" : {
      "Fn::Not" : [{
         "Fn::Equals" : [
            {"Ref" : "CassandraPath"},
            "/mnt"
         ]
      }]
   }
  },
  "Resources": {
    "stack": {
      "Type": "AWS::OpsWorks::Stack",
      "Properties": {
        "Name": { "Ref": "AWS::StackName" },
        "VpcId" : { "Ref" : "VPC" },
        "DefaultSubnetId" : { "Fn::Select" : [ "0", {"Ref" : "PrivateSubnets"} ] },
        "DefaultSshKeyName" : { "Ref" : "DefaultKeyPair" },
        "ConfigurationManager" : {
          "Name" : "Chef",
          "Version" : "11.10"
        },
        "ServiceRoleArn": { "Fn::GetAtt": [ "OpsWorksServiceRole", "Arn" ] },
        "DefaultInstanceProfileArn": { "Fn::GetAtt": [ "OpsWorksInstanceProfile", "Arn" ] },
        "CustomJson": {
          "cassandra":{
            "package_name": "dsc21",
            "version": "2.1.7",
            "release": "1",
            "install_java":true,
            "snitch":"Ec2Snitch",
            "root_dir": { "Fn::Join": ["/",[{"Ref":"CassandraPath"},"db"]]},
            "log_dir": { "Fn::Join": ["/",[{"Ref":"CassandraPath"},"logs"]]}
          },
          "rabbitmq": {
            "kernel": {
              "inet_dist_listen_min": 25672,
              "inet_dist_listen_max": 25672
            },
            "policies": {
              "ha-all-queues": {
                "pattern": ".*",
                "params": { "ha-mode": "all" },
                "priority": 0
              }
            }
          },
          "mongodb":{
            "config":{
              "dbpath":{ "Fn::Join": ["/",[{"Ref":"MongoPath"},"db"]]},
              "logpath":{ "Fn::Join": ["/",[{"Ref":"MongoPath"},"logs","mongodb.log"]]}
            },
            "package_version": "2.6.4-1",
            "cluster_name": "conversation_mongodb_cluster"
          },
          "mongodb-opsworks" : {
            "sharded" : true,
            "debug_objects": true,
            "configsvr_layer":"mongo-cfg",
            "mongos_layer":"conversation_app"
          },
          "deploy":{
            "conversation_app":{
              "environment_variables":{
                "PORT":80,
                "LOG_LEVEL":"silly"
              }
            }
          },
          "amazon" : {
            "region" : { "Ref" : "AWS::Region" }
          }
        },
        "DefaultOs": { "Ref": "DefaultOs" },
        "UseCustomCookbooks": true,
        "CustomCookbooksSource": {
          "Type": "git",
          "Url": { "Ref" : "GitCookbookRepo" },
          "Revision" : "master"
        }
      }
    },
    "app": {
      "Type": "AWS::OpsWorks::App",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "Name": "conversation_app",
        "Type": "nodejs",
        "AppSource": {
          "Type": "archive",
          "Url": { "Ref" : "AppRepo" }
        }
      }
    },
    "appLayer": {
      "Type": "AWS::OpsWorks::Layer",
      "DependsOn": "app",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "Name": "conversation_app",
        "CustomRecipes":{
          "Setup" : ["mongodb::mongodb_org_repo"],
          "Configure" : ["mongodb-opsworks::default", "mongodb::mongos","opsworks_cassandra::app","opsworks_rabbitmq::app","opsworks_nodejs::create_env_file"]
        },
        "Type": "nodejs-app",
        "Shortname": "conversation_app",
        "EnableAutoHealing": "true",
        "AutoAssignElasticIps": "false",
        "AutoAssignPublicIps": "false",
        "CustomSecurityGroupIds" : [          
          { "Ref" : "appProxySecurityGroup" }
        ]
      }
    },
    "appInstance0": {
      "Type": "AWS::OpsWorks::Instance",
      "DependsOn":["mongocfg0","mongocfg1","mongocfg2","cassandraClusterA0","cassandraClusterA1","cassandraClusterA2","rabbitmq0","rabbitmq1","rabbitmq2"],
      "Properties": {
        "StackId": { "Ref": "stack" },
        "LayerIds": [ { "Ref": "appLayer" } ],
        "InstallUpdatesOnBoot": false,
        "InstanceType": { "Ref" : "InstanceType" },
        "RootDeviceType": "ebs",
        "Architecture": "x86_64",
        "SubnetId" : { "Fn::Select" : [ "0", {"Ref" : "PrivateSubnets"} ] }
      }
    },
    "appInstance1": {
      "Type": "AWS::OpsWorks::Instance",
      "DependsOn":["mongocfg0","mongocfg1","mongocfg2","cassandraClusterA0","cassandraClusterA1","cassandraClusterA2","rabbitmq0","rabbitmq1","rabbitmq2"],
      "Properties": {
        "StackId": { "Ref": "stack" },
        "LayerIds": [ { "Ref": "appLayer" } ],
        "InstallUpdatesOnBoot": false,
        "InstanceType": { "Ref" : "InstanceType" },
        "RootDeviceType": "ebs",
        "Architecture": "x86_64",
        "SubnetId" : { "Fn::Select" : [ "1", {"Ref" : "PrivateSubnets"} ] }
      }
    },
    "appInstance2": {
      "Type": "AWS::OpsWorks::Instance",
      "DependsOn":["mongocfg0","mongocfg1","mongocfg2","cassandraClusterA0","cassandraClusterA1","cassandraClusterA2","rabbitmq0","rabbitmq1","rabbitmq2"],
      "Properties": {
        "StackId": { "Ref": "stack" },
        "LayerIds": [ { "Ref": "appLayer" } ],
        "InstallUpdatesOnBoot": false,
        "InstanceType": { "Ref" : "InstanceType" },
        "RootDeviceType": "ebs",
        "Architecture": "x86_64",
        "SubnetId" : { "Fn::Select" : [ "2", {"Ref" : "PrivateSubnets"} ] }
      }
    },
    "ELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "CrossZone" : "true",
        "SecurityGroups": [ { "Ref": "ELBSecurityGroup" } ],
        "Subnets": { "Ref": "PublicSubnets" },
        "Listeners": [ {
          "LoadBalancerPort": "80",
          "InstancePort": "80",
          "Protocol": "HTTP"
        } ],
        "HealthCheck": {
          "Target": "HTTP:80/",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "90",
          "Timeout": "60"
        }
      }
    },

    "ELBAttachment": {
      "Type": "AWS::OpsWorks::ElasticLoadBalancerAttachment",
      "Properties": {
        "ElasticLoadBalancerName": { "Ref": "ELB" },
        "LayerId": { "Ref": "appLayer" }
      }
    },
    "RabbitmqELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "CrossZone" : "true",
        "SecurityGroups": [ { "Ref": "rabbitSecurityGroup" } ],
        "Subnets": {"Ref" : "PrivateSubnets"},
        "Scheme":"internal",
        "Listeners": [ {
          "LoadBalancerPort": "5672",
          "InstancePort": "5672",
          "Protocol": "TCP"
        } ],
        "HealthCheck": {
          "Target": "TCP:5672",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "90",
          "Timeout": "60"
        }
      }
    },
    "RabbitmqELBAttachment": {
      "Type": "AWS::OpsWorks::ElasticLoadBalancerAttachment",
      "Properties": {
        "ElasticLoadBalancerName": { "Ref": "RabbitmqELB" },
        "LayerId": { "Ref": "rabbitmq" }
      }
    },

    "ELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : "Allow inbound access to the ELB",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [ {
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
        } ],
        "SecurityGroupEgress": [ {
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
        } ]
      }
    },
    "appProxySecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : "Allow inbound requests from the ELB to the OpsWorks instances",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [
           {
             "IpProtocol": "tcp",
             "FromPort": "80",
             "ToPort": "80",
             "CidrIp": "0.0.0.0/0"
           },
           {
             "IpProtocol": "tcp",
             "FromPort": "22",
             "ToPort": "22",
             "CidrIp": "0.0.0.0/0"
           }
        ]
      }
    },

    "mongoSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : "Allow inbound requests from the ELB to the OpsWorks instances",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [
           {
             "IpProtocol": "tcp",
             "FromPort": "27017",
             "ToPort": "27017",
             "CidrIp": "0.0.0.0/0"
           }
        ]
      }
    },
    "cassandraSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : "Allow inbound requests from the ELB to the OpsWorks instances",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [
           {
             "IpProtocol": "tcp",
             "FromPort": "7000",
             "ToPort": "7001",
             "CidrIp": "0.0.0.0/0"
           },
           {
             "IpProtocol": "tcp",
             "FromPort": "7199",
             "ToPort": "7199",
             "CidrIp": "0.0.0.0/0"
           },
           {
             "IpProtocol": "tcp",
             "FromPort": "9042",
             "ToPort": "9042",
             "CidrIp": "0.0.0.0/0"
           }
        ]
      }
    },
    "rabbitSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : "Allow inbound requests from the ELB to the OpsWorks instances",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [
           {
             "IpProtocol": "tcp",
             "FromPort": "4369",
             "ToPort": "4369",
             "CidrIp": "0.0.0.0/0"
           },
           {
             "IpProtocol": "tcp",
             "FromPort": "25672",
             "ToPort": "25672",
             "CidrIp": "0.0.0.0/0"
           },
           {
             "IpProtocol": "tcp",
             "FromPort": "5672",
             "ToPort": "5672",
             "CidrIp": "0.0.0.0/0"
           }
        ]
      }
    },
    "mongoShardA": {
      "Type": "AWS::OpsWorks::Layer",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "Name": "mongo-replicaset-shard-a",
        "Type": "custom",
        "Shortname": "shard-a",
        "EnableAutoHealing": "true",
        "AutoAssignElasticIps": "false",
        "AutoAssignPublicIps": "false",
        "CustomRecipes":{
          "Setup" : ["mongodb::mongodb_org_repo"],
          "Configure" : ["mongodb-opsworks::default", "mongodb::shard", "mongodb::replicaset"]
        },
        "CustomSecurityGroupIds" : [          
          { "Ref" : "mongoSecurityGroup" }
        ],
        "VolumeConfigurations" : [
          {
            "MountPoint" : {"Ref":"MongoPath"},
            "NumberOfDisks" : 2,
            "RaidLevel" : 1,
            "Size" : { "Ref" : "StorageSize" }
          }
        ]
      }
    },
     "shardA0": {
      "Type": "AWS::OpsWorks::Instance",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "LayerIds": [ { "Ref": "mongoShardA" } ],
        "InstallUpdatesOnBoot": false,
        "InstanceType": { "Ref" : "InstanceType" },
        "RootDeviceType": "ebs",
        "Architecture": "x86_64",
        "SubnetId" : { "Fn::Select" : [ "0", {"Ref" : "PrivateSubnets"} ] }
      }
    },
     "shardA1": {
      "Type": "AWS::OpsWorks::Instance",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "LayerIds": [ { "Ref": "mongoShardA" } ],
        "InstallUpdatesOnBoot": false,
        "InstanceType": { "Ref" : "InstanceType" },
        "RootDeviceType": "ebs",
        "Architecture": "x86_64",
        "SubnetId" : { "Fn::Select" : [ "1", {"Ref" : "PrivateSubnets"} ] }
      }
    },
     "shardA2": {
      "Type": "AWS::OpsWorks::Instance",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "LayerIds": [ { "Ref": "mongoShardA" } ],
        "InstallUpdatesOnBoot": false,
        "InstanceType": { "Ref" : "InstanceType" },
        "RootDeviceType": "ebs",
        "Architecture": "x86_64",
        "SubnetId" : { "Fn::Select" : [ "2", {"Ref" : "PrivateSubnets"} ] }
      }
    },
    "mongoCfgLayer": {
      "Type": "AWS::OpsWorks::Layer",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "Name": "mongo-cfg",
        "Type": "custom",
        "Shortname": "mongo-cfg",
        "EnableAutoHealing": "true",
        "AutoAssignElasticIps": "false",
        "AutoAssignPublicIps": "false",
        "CustomRecipes":{
          "Setup" : ["mongodb::mongodb_org_repo"],
          "Configure" : ["mongodb-opsworks::default", "mongodb::configserver"]
        },
        "CustomSecurityGroupIds" : [          
          { "Ref" : "mongoSecurityGroup" }
        ],
        "VolumeConfigurations" : [
          {
            "MountPoint" : {"Ref":"MongoPath"},
            "NumberOfDisks" : 2,
            "RaidLevel" : 1,
            "Size" : { "Ref" : "StorageSize" }
          }
        ]
      }
    },
     "mongocfg0": {
      "Type": "AWS::OpsWorks::Instance",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "LayerIds": [ { "Ref": "mongoCfgLayer" } ],
        "InstallUpdatesOnBoot": false,
        "InstanceType": { "Ref" : "InstanceType" },
        "RootDeviceType": "ebs",
        "Architecture": "x86_64",
        "SubnetId" : { "Fn::Select" : [ "0", {"Ref" : "PrivateSubnets"} ] }
      }
    },
     "mongocfg1": {
      "Type": "AWS::OpsWorks::Instance",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "LayerIds": [ { "Ref": "mongoCfgLayer" } ],
        "InstallUpdatesOnBoot": false,
        "InstanceType": { "Ref" : "InstanceType" },
        "RootDeviceType": "ebs",
        "Architecture": "x86_64",
        "SubnetId" : { "Fn::Select" : [ "1", {"Ref" : "PrivateSubnets"} ] }
      }
    },
     "mongocfg2": {
      "Type": "AWS::OpsWorks::Instance",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "LayerIds": [ { "Ref": "mongoCfgLayer" } ],
        "InstallUpdatesOnBoot": false,
        "InstanceType": { "Ref" : "InstanceType" },
        "RootDeviceType": "ebs",
        "Architecture": "x86_64",
        "SubnetId" : { "Fn::Select" : [ "2", {"Ref" : "PrivateSubnets"} ] }
      }
    },
    "cassandraSeeds": {
      "Type": "AWS::OpsWorks::Layer",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "Name": "cassandra-seeds",
        "Type": "custom",
        "Shortname": "cassandra-seeds",
        "EnableAutoHealing": "true",
        "AutoAssignElasticIps": "false",
        "AutoAssignPublicIps": "false",
        "CustomSecurityGroupIds" : [          
          { "Ref" : "cassandraSecurityGroup" }
        ]
      }
    },
    "cassandraClusterA": {
      "Type": "AWS::OpsWorks::Layer",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "Name": "cassandra-cluster-a",
        "Type": "custom",
        "Shortname": "cluster-a",
        "EnableAutoHealing": "true",
        "AutoAssignElasticIps": "false",
        "AutoAssignPublicIps": "false",
        "CustomRecipes":{
          "Configure" : ["opsworks_cassandra::default"]
        },
        "CustomSecurityGroupIds" : [          
          { "Ref" : "cassandraSecurityGroup" }
        ],
        "VolumeConfigurations" : [
          {
            "MountPoint" : {"Ref":"CassandraPath"},
            "NumberOfDisks" : 2,
            "RaidLevel" : 1,
            "Size" : { "Ref" : "StorageSize" }
          }
        ]
      }
    },
     "cassandraClusterA0": {
      "Type": "AWS::OpsWorks::Instance",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "LayerIds": [ { "Ref": "cassandraClusterA" },{ "Ref": "cassandraSeeds" } ],
        "InstallUpdatesOnBoot": false,
        "InstanceType": { "Ref" : "CassandraInstanceType" },
        "RootDeviceType": "ebs",
        "Architecture": "x86_64",
        "SubnetId" : { "Fn::Select" : [ "0", {"Ref" : "PrivateSubnets"} ] }
      }
    },
    "cassandraClusterA1": {
      "DependsOn":["cassandraClusterA0"],
      "Type": "AWS::OpsWorks::Instance",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "LayerIds": [ { "Ref": "cassandraClusterA" } ],
        "InstallUpdatesOnBoot": false,
        "InstanceType": { "Ref" : "CassandraInstanceType" },
        "RootDeviceType": "ebs",
        "Architecture": "x86_64",
        "SubnetId" : { "Fn::Select" : [ "1", {"Ref" : "PrivateSubnets"} ] }
      }
    },
     "cassandraClusterA2": {
      "DependsOn":["cassandraClusterA0"],
      "Type": "AWS::OpsWorks::Instance",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "LayerIds": [ { "Ref": "cassandraClusterA" } ],
        "InstallUpdatesOnBoot": false,
        "InstanceType": { "Ref" : "CassandraInstanceType" },
        "RootDeviceType": "ebs",
        "Architecture": "x86_64",
        "SubnetId" : { "Fn::Select" : [ "2", {"Ref" : "PrivateSubnets"} ] }
      }
    },

    "rabbitmq": {
      "Type": "AWS::OpsWorks::Layer",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "Name": "rabbitmq",
        "Type": "custom",
        "Shortname": "rabbitmq",
        "EnableAutoHealing": "true",
        "AutoAssignElasticIps": "false",
        "AutoAssignPublicIps": "false",
        "CustomRecipes":{
          "Setup": [ "opsworks_rabbitmq::install" ],
          "Configure":["opsworks_rabbitmq::configure","opsworks_rabbitmq::cluster"]
        },
        "CustomSecurityGroupIds" : [          
          { "Ref" : "rabbitSecurityGroup" }
        ]
      }
    },
     "rabbitmq0": {
      "Type": "AWS::OpsWorks::Instance",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "LayerIds": [ { "Ref": "rabbitmq" } ],
        "InstallUpdatesOnBoot": false,
        "InstanceType": { "Ref" : "InstanceType" },
        "RootDeviceType": "ebs",
        "Architecture": "x86_64",
        "SubnetId" : { "Fn::Select" : [ "0", {"Ref" : "PrivateSubnets"} ] }
      }
    },
     "rabbitmq1": {
      "Type": "AWS::OpsWorks::Instance",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "LayerIds": [ { "Ref": "rabbitmq" } ],
        "InstallUpdatesOnBoot": false,
        "InstanceType": { "Ref" : "InstanceType" },
        "RootDeviceType": "ebs",
        "Architecture": "x86_64",
        "SubnetId" : { "Fn::Select" : [ "1", {"Ref" : "PrivateSubnets"} ] }
      }
    },
     "rabbitmq2": {
      "Type": "AWS::OpsWorks::Instance",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "LayerIds": [ { "Ref": "rabbitmq" } ],
        "InstallUpdatesOnBoot": false,
        "InstanceType": { "Ref" : "InstanceType" },
        "RootDeviceType": "ebs",
        "Architecture": "x86_64",
        "SubnetId" : { "Fn::Select" : [ "2", {"Ref" : "PrivateSubnets"} ] }
      }
    },
    "OpsWorksServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "ec2.amazonaws.com","opsworks.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "opsworks-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                             "cloudwatch:GetMetricStatistics",
                             "ec2:*",
                             "elasticloadbalancing:*",
                             "iam:PassRole",
                             "rds:*"
                           ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "OpsWorksInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "ec2.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "opsworks-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "ec2:*",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "OpsWorksInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "OpsWorksInstanceRole" } ]
      }
    }
  },
  "Outputs": {
    "StackId": { "Value": { "Ref": "stack" } }
  }
}
